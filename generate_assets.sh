#!/bin/bash

# Purpose: Generate a Dart class for assets to provide type-safe access.
#
# This script scans the ASSETS_DIR, ignores the 'fonts' subdirectory,
# and creates a Dart file at OUTPUT_FILE. It handles filenames with spaces,
# hyphens, and capital letters, converting them into valid lowerCamelCase
# Dart variable names.

# --- Configuration ---
ASSETS_DIR="assets"
OUTPUT_FILE="lib/constants/app_assets.dart"
CLASS_NAME="AppAssets"

# Create the output directory if it doesn't exist
mkdir -p "$(dirname "$OUTPUT_FILE")"

# --- Script Start ---
echo "ðŸš€ Starting asset generation..."

# Clear the existing file and write the header
{
  echo "// This file is generated by a script. Do not edit."
  echo "// For more details, see generate_assets.sh."
  echo ""
  echo "class $CLASS_NAME {"
  echo "  const $CLASS_NAME._();"
  echo ""
} > "$OUTPUT_FILE"

# Find top-level directories in the assets folder
for dir in $(find "$ASSETS_DIR" -maxdepth 1 -mindepth 1 -type d | sort); do
    folder_name=$(basename "$dir")

    # --- Rule: Exclude 'fonts' directory ---
    if [[ "$folder_name" == "fonts" ]]; then
        continue
    fi

    # --- Rule: Add section comments like // === Images === ---
    section_name_capitalized="$(tr '[:lower:]' '[:upper:]' <<< ${folder_name:0:1})${folder_name:1}"
    echo "  // === $section_name_capitalized ===" >> "$OUTPUT_FILE"

    # --- Rule: Order assets by extension ---
    extensions=("svg" "png" "jpg" "jpeg" "gif" "webp" "json" "riv")

    first_entry_in_section=true
    for ext in "${extensions[@]}"; do
        # Find all files with the current extension, but don't process yet
        files_found=$(find "$dir" -type f -name "*.$ext")
        if [[ -z "$files_found" ]]; then
            continue
        fi

        # Add a comment for the file type, e.g., // .svg
        if [ "$first_entry_in_section" = false ]; then
          echo "" >> "$OUTPUT_FILE"
        fi
        echo "  // .$ext" >> "$OUTPUT_FILE"
        first_entry_in_section=false

        # Use a while read loop to correctly handle filenames with spaces and special chars
        echo "$files_found" | sort | while IFS= read -r file; do
            # --- Generate a clean, camelCase variable name from the file path ---
            # e.g., 'assets/images/Onboarding/Welcome - Screen 1.png'
            
            # 1. Get path relative to assets dir, without extension
            var_name_base=$(echo "$file" | sed -e "s#^$ASSETS_DIR/##" -e "s#\.$ext##")

            # 2. Convert to lowercase and replace all invalid chars (/, -, space) with an underscore
            var_name_snake=$(echo "$var_name_base" | tr '[:upper:]' '[:lower:]' | sed -e 's#[/ -]\+/_#g' -e 's/^_//' -e 's/_$//')
            
            # 3. Convert snake_case to lowerCamelCase
            var_name_camel=$(echo "$var_name_snake" | awk -F_ '{printf "%s", $1; for(i=2; i<=NF; i++) printf "%s", toupper(substr($i,1,1)) substr($i,2)}')
            
            # 4. If the name starts with a number, prefix it to make it a valid variable name
            if [[ $var_name_camel =~ ^[0-9] ]]; then
                var_name_camel="asset$var_name_camel"
            fi

            # Write the static constant to the file
            echo "  static const String $var_name_camel = '$file';" >> "$OUTPUT_FILE"
        done
    done
    echo "" >> "$OUTPUT_FILE"
done

# Write the closing brace for the class
echo "}" >> "$OUTPUT_FILE"

echo "âœ… Success! Asset class '$CLASS_NAME' generated at '$OUTPUT_FILE'."
